
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 20 22:04:03 COT 2015
//----------------------------------------------------

package compi;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 20 22:04:03 COT 2015
  */
public class AnalizadorSintantico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintantico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintantico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintantico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\005\004\000\002\002\004\000\002\005" +
    "\003\000\002\005\004\000\002\005\003\000\002\005\004" +
    "\000\002\005\003\000\002\005\003\000\002\006\004\000" +
    "\002\002\005\000\002\014\005\000\002\014\003\000\002" +
    "\007\004\000\002\004\005\000\002\015\005\000\002\015" +
    "\003\000\002\016\006\000\002\010\004\000\002\011\010" +
    "\000\002\003\007\000\002\003\005\000\002\003\002\000" +
    "\002\012\006\000\002\012\005\000\002\012\004\000\002" +
    "\017\004\000\002\017\003\000\002\013\004\000\002\013" +
    "\003\000\002\023\004\000\002\023\003\000\002\020\003" +
    "\000\002\021\005\000\002\021\010\000\002\021\004\000" +
    "\002\022\003\000\002\022\004\000\002\024\005\000\002" +
    "\024\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\005\000\002\027\005\000\002\027\005\000\002\026\010" +
    "\000\002\026\012\000\002\026\010\000\002\026\010\000" +
    "\002\030\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\006\003\011\004\010\001\002\000\006\002" +
    "\uffff\004\uffff\001\002\000\006\002\151\004\010\001\002" +
    "\000\006\002\ufffd\004\ufffd\001\002\000\004\006\146\001" +
    "\002\000\004\010\122\001\002\000\006\002\ufffa\004\ufffa" +
    "\001\002\000\004\013\017\001\002\000\006\002\ufffb\004" +
    "\ufffb\001\002\000\004\006\015\001\002\000\016\002\ufff9" +
    "\004\ufff9\005\ufff9\024\ufff9\027\ufff9\030\ufff9\001\002\000" +
    "\006\002\ufff0\004\ufff0\001\002\000\016\004\032\005\031" +
    "\014\024\024\030\027\023\030\033\001\002\000\004\006" +
    "\uffe2\001\002\000\014\005\uffe3\014\uffe3\024\uffe3\027\uffe3" +
    "\030\uffe3\001\002\000\014\004\uffe7\005\uffe7\024\uffe7\027" +
    "\uffe7\030\uffe7\001\002\000\004\011\115\001\002\000\006" +
    "\002\uffe9\004\uffe9\001\002\000\004\006\114\001\002\000" +
    "\014\005\uffe5\014\uffe5\024\uffe5\027\uffe5\030\uffe5\001\002" +
    "\000\014\004\032\005\031\024\030\027\023\030\033\001" +
    "\002\000\004\011\102\001\002\000\010\015\061\017\060" +
    "\020\057\001\002\000\004\010\052\001\002\000\004\005" +
    "\031\001\002\000\014\005\031\014\035\024\030\027\023" +
    "\030\033\001\002\000\006\002\uffea\004\uffea\001\002\000" +
    "\014\005\uffe6\014\uffe6\024\uffe6\027\uffe6\030\uffe6\001\002" +
    "\000\004\006\051\001\002\000\004\027\041\001\002\000" +
    "\004\011\042\001\002\000\004\005\043\001\002\000\004" +
    "\022\046\001\002\000\004\012\045\001\002\000\014\005" +
    "\uffd3\014\uffd3\024\uffd3\027\uffd3\030\uffd3\001\002\000\006" +
    "\005\047\023\050\001\002\000\004\012\uffd7\001\002\000" +
    "\004\012\uffd6\001\002\000\016\005\uffd1\014\uffd1\024\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\001\002\000\004\005\053\001" +
    "\002\000\006\006\ufff6\007\ufff6\001\002\000\006\006\ufff8" +
    "\007\055\001\002\000\004\005\056\001\002\000\006\006" +
    "\ufff7\007\ufff7\001\002\000\004\006\uffdf\001\002\000\010" +
    "\005\062\011\063\023\067\001\002\000\010\005\062\011" +
    "\063\023\067\001\002\000\012\006\uffda\016\uffda\020\100" +
    "\021\uffda\001\002\000\010\005\071\011\063\023\067\001" +
    "\002\000\004\016\073\001\002\000\012\006\uffdb\012\uffdb" +
    "\016\uffdb\021\uffdb\001\002\000\010\006\uffde\016\uffde\021" +
    "\070\001\002\000\012\006\uffd9\012\uffd9\016\uffd9\021\uffd9" +
    "\001\002\000\010\005\071\011\063\023\067\001\002\000" +
    "\012\006\uffda\012\uffda\016\uffda\021\uffda\001\002\000\012" +
    "\006\uffdc\012\uffdc\016\uffdc\021\uffdc\001\002\000\004\017" +
    "\074\001\002\000\010\005\062\011\063\023\067\001\002" +
    "\000\004\006\uffe0\001\002\000\006\012\077\021\070\001" +
    "\002\000\012\006\uffd8\012\uffd8\016\uffd8\021\uffd8\001\002" +
    "\000\006\006\uffdd\016\uffdd\001\002\000\004\006\uffe1\001" +
    "\002\000\004\005\043\001\002\000\004\012\104\001\002" +
    "\000\004\025\105\001\002\000\004\005\031\001\002\000" +
    "\016\005\uffd5\014\uffd5\024\uffd5\026\107\027\uffd5\030\uffd5" +
    "\001\002\000\004\005\031\001\002\000\014\005\uffd4\014" +
    "\uffd4\024\uffd4\027\uffd4\030\uffd4\001\002\000\014\004\uffe8" +
    "\005\uffe8\024\uffe8\027\uffe8\030\uffe8\001\002\000\014\005" +
    "\031\014\113\024\030\027\023\030\033\001\002\000\006" +
    "\002\uffeb\004\uffeb\001\002\000\014\005\uffe4\014\uffe4\024" +
    "\uffe4\027\uffe4\030\uffe4\001\002\000\004\005\043\001\002" +
    "\000\004\012\117\001\002\000\004\030\120\001\002\000" +
    "\004\005\031\001\002\000\014\005\uffd2\014\uffd2\024\uffd2" +
    "\027\uffd2\030\uffd2\001\002\000\004\005\123\001\002\000" +
    "\012\006\ufff6\007\ufff6\011\134\015\131\001\002\000\006" +
    "\006\ufff4\007\126\001\002\000\006\006\ufff2\007\ufff2\001" +
    "\002\000\004\005\127\001\002\000\004\015\131\001\002" +
    "\000\006\006\ufff3\007\ufff3\001\002\000\004\023\132\001" +
    "\002\000\004\016\133\001\002\000\006\006\ufff1\007\ufff1" +
    "\001\002\000\010\004\136\007\uffec\012\uffec\001\002\000" +
    "\006\007\141\012\142\001\002\000\004\010\137\001\002" +
    "\000\004\005\140\001\002\000\006\007\uffed\012\uffed\001" +
    "\002\000\004\004\143\001\002\000\004\013\uffef\001\002" +
    "\000\004\010\144\001\002\000\004\005\145\001\002\000" +
    "\006\007\uffee\012\uffee\001\002\000\006\002\ufff5\004\ufff5" +
    "\001\002\000\006\002\001\004\001\001\002\000\006\002" +
    "\ufffe\004\ufffe\001\002\000\004\002\000\001\002\000\006" +
    "\002\ufffc\004\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\020\002\013\004\006\005\004\006\003\007" +
    "\005\010\012\011\011\001\001\000\002\001\001\000\016" +
    "\002\013\004\006\006\146\007\147\010\151\011\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\002\013\006\021\013\033\017\026\020\024\021" +
    "\017\023\025\026\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\002\013" +
    "\006\110\013\111\020\024\021\017\023\025\026\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\036\030\037\001\001\000\012\020\024\021" +
    "\017\023\035\026\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\022\100" +
    "\024\065\025\064\001\001\000\010\022\063\024\065\025" +
    "\064\001\001\000\002\001\001\000\006\024\075\025\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\074\024\065\025\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\036\030\105\001\001\000\002\001" +
    "\001\000\006\021\036\030\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\020\024\021\017\023\035\026" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\036\030\120\001\001\000\002\001\001\000\010" +
    "\014\053\015\123\016\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintantico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintantico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintantico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public void syntax_error( Symbol s ){
		System.out.println("Error de Sintaxis:"+"En linea " + s.left+" y columna " + s.right );
}


public void unrecovered_syntax_error( Symbol s ) throws java.lang.Exception
{

}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintantico$actions {



  private final AnalizadorSintantico parser;

  /** Constructor */
  CUP$AnalizadorSintantico$actions(AnalizadorSintantico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintantico$do_action(
    int                        CUP$AnalizadorSintantico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintantico$parser,
    java.util.Stack            CUP$AnalizadorSintantico$stack,
    int                        CUP$AnalizadorSintantico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintantico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintantico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // T1 ::= ATRIBUCIONES END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("T1",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONTROL_FLU ::= WHILE PAR_AB EXPRESION_COMP PAR_CER DO T1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("CONTROL_FLU",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONTROL_FLU ::= DO T1 WHILE PAR_AB EXPRESION_COMP PAR_CER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("CONTROL_FLU",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONTROL_FLU ::= IF PAR_AB EXPRESION_COMP PAR_CER THEN T1 ELSE T1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("CONTROL_FLU",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONTROL_FLU ::= IF PAR_AB EXPRESION_COMP PAR_CER THEN T1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("CONTROL_FLU",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION_COMP ::= ID OP_COMP ENTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("EXPRESION_COMP",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION_COMP ::= ID OP_COMP ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("EXPRESION_COMP",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // F ::= PAR_AB E PAR_CER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("F",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // F ::= ENTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("F",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // F ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("F",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E ::= F 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E ::= E OP_BINARIO F 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("E",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= ID OP_UNARIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= E 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ATRIBUCIONES ::= ID OP_UNARIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ATRIBUCIONES ::= ID COR_AB EXPRESION COR_CER IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ATRIBUCIONES ::= ID IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // COMANDO_SIM ::= ATRIBUCIONES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("COMANDO_SIM",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CO ::= CONTROL_FLU 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("CO",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CO ::= COMANDO_SIM END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("CO",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BLOQUE ::= CO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("BLOQUE",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BLOQUE ::= BLOQUE CO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("BLOQUE",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECL_LOC ::= decl_var 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("DECL_LOC",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECL_LOC ::= DECL_LOC decl_var 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("DECL_LOC",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO ::= LLAV_AB LLAV_CER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("CUERPO",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO ::= LLAV_AB BLOQUE LLAV_CER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("CUERPO",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPO ::= LLAV_AB DECL_LOC BLOQUE LLAV_CER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("CUERPO",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXP ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXP ::= TIPO DOSPUN ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP ::= EXP COMA TIPO DOSPUN ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ENCAB ::= TIPO DOSPUN ID PAR_AB EXP PAR_CER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("ENCAB",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // decl_fun ::= ENCAB CUERPO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("decl_fun",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VECT ::= ID COR_AB ENTERO COR_CER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("VECT",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTAV ::= VECT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("LISTAV",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTAV ::= LISTAV COMA VECT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("LISTAV",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exprvec ::= TIPO DOSPUN LISTAV 
            {
              Object RESULT =null;
		 System.out.println("doc ok"); 
              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("exprvec",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decl_vec ::= exprvec END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("decl_vec",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTA ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("LISTA",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTA ::= LISTA COMA ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("LISTA",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= TIPO DOSPUN LISTA 
            {
              Object RESULT =null;
		 System.out.println("doc ok"); 
              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl_var ::= expr END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("decl_var",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr_list ::= error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("expr_list",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr_list ::= decl_fun 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("expr_list",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr_list ::= expr_list decl_fun 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("expr_list",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_list ::= decl_vec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("expr_list",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_list ::= expr_list decl_vec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("expr_list",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= decl_var 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("expr_list",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintantico$parser.done_parsing();
          return CUP$AnalizadorSintantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= expr_list decl_var 
            {
              Object RESULT =null;

              CUP$AnalizadorSintantico$result = parser.getSymbolFactory().newSymbol("expr_list",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.elementAt(CUP$AnalizadorSintantico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintantico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintantico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

